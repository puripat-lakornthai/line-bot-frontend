import React, { useState, useEffect, useContext, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Select, Spin, Alert } from 'antd';
import { toast } from 'react-toastify';
import Swal from 'sweetalert2';
import AuthContext from '../contexts/AuthContext';
import ticketService from '../services/ticketService';
import userService from '../services/userService';
import StatusBadge from '../components/StatusBadge';
import PriorityBadge from '../components/PriorityBadge';
import ImageAttachments from '../ticketdetail/ImageAttachments';
import VideoAttachments from '../ticketdetail/VideoAttachments';
import FileAttachments from '../ticketdetail/FileAttachments';
import '../styles/TicketDetailPage.css';

const { Option } = Select;

// ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
const statusOptions = [
  { value: 'new', label: '‡πÉ‡∏´‡∏°‡πà' },
  { value: 'assigned', label: '‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß' },
  { value: 'pending', label: '‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°' },
  { value: 'in_progress', label: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' },
  { value: 'resolved', label: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß' },
  { value: 'closed', label: '‡∏õ‡∏¥‡∏î‡∏á‡∏≤‡∏ô' }
];

// ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà staff ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô
const statusFlowMap = {
  new: ['assigned', 'pending'],
  assigned: ['in_progress', 'pending'],
  in_progress: ['resolved', 'pending'],
  pending: ['in_progress'],
  resolved: ['closed', 'in_progress'],
  closed: []
};

// ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ
const getNextStatusOptions = curr =>
  statusOptions.filter(opt => (statusFlowMap[curr] || []).includes(opt.value));

const TicketDetailPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { currentUser } = useContext(AuthContext);
  const isAdmin = currentUser?.role === 'admin';
  // const isStaff = currentUser?.role === 'staff';
  const API_BASE = process.env.REACT_APP_BACKEND_URL || 'http://localhost:3001';

  const [ticket, setTicket] = useState(null);
  const [assignees, setAssignees] = useState([]);
  const [selectedAssignees, setSelectedAssignees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  // useEffect(() => { if (id) loadTicket(); }, [id]);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Ç‡∏≠‡∏á staff ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ ‡∏à‡∏∞ redirect ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤
  // useEffect(() => {
  //   if (!ticket || isAdmin) return; // admin ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å ticket

  //   if (isStaff) {
  //     const isAssignedStaff = ticket.assignees?.some(a => a.user_id === currentUser.user_id);
  //     if (!isAssignedStaff) {
  //       toast.error('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Ticket ‡∏ô‡∏µ‡πâ');
  //       navigate('/my-tickets');
  //     }
  //   }
  // }, [ticket, currentUser, isAdmin, isStaff, navigate]);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ticket ‡πÅ‡∏•‡∏∞ staff ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ***
  const loadTicket = useCallback(async () => {
    try {
      const [t, staff] = await Promise.all([
        ticketService.getTicketById(id),
        userService.getAllStaff()
      ]);
      setTicket(t);
      setAssignees(staff);
      syncSelected(t, staff);
    } catch (err) {
      console.error('üî• DEBUG ERR:', err);

      const status = err?.response?.status;
      const msg = err?.response?.data?.message || err?.message || '';

      if (status === 403 || msg.includes('‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå') || msg.includes('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢')) {
        toast.error('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Ticket ‡∏ô‡∏µ‡πâ');
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ toast ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô
        setTimeout(() => navigate('/staff/my-tickets'), 1000);
      } else {
        toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ');
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket ‡πÑ‡∏î‡πâ');
      }
    } finally {
      setLoading(false);
    }
  }, [id, navigate]);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ id ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ useEffect ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  useEffect(() => {
    if (id) loadTicket();
  }, [id, loadTicket]);

  // ‡πÇ‡∏´‡∏•‡∏î ticket ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
  const refresh = async () => {
    const t = await ticketService.getTicketById(id);
    setTicket(t);
    syncSelected(t, assignees);
  };

  // ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö (‡πÉ‡∏ô dropdown)
  const syncSelected = (t, staff) => {
    const selected = staff.filter(u =>
      t.assignees?.some(a => a.user_id === u.user_id)
    );
    setSelectedAssignees(selected.map(u => ({ value: u.user_id, label: u.full_name })));
  };

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô dropdown
  const handleAssigneeChange = async (newIds) => {
    const oldIds = ticket.assignees?.map(a => a.user_id) || [];
    const removed = oldIds.filter(id => !newIds.includes(id));
    const selected = assignees.filter(u => newIds.includes(u.user_id));
    setSelectedAssignees(selected.map(u => ({ value: u.user_id, label: u.full_name })));

    if (!removed.length) return; // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á update

    try {
      await ticketService.assignTicket(id, newIds);
      if (!newIds.length) {
        await ticketService.updateTicket(id, { status: 'new' });
      } else if (ticket.status === 'new') {
        await ticketService.updateTicket(id, { status: 'assigned' });
      }
      await refresh();
      toast.success('‡∏•‡∏ö‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
    } catch {
      toast.error('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }
  };

  // ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
  const handleAssignConfirm = async () => {
    const ids = selectedAssignees.map(a => a.value);
    if (!ids.length) return toast.warn('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö');

    try {
      await ticketService.assignTicket(id, ids);
      if (ticket.status === 'new') {
        await ticketService.updateTicket(id, { status: 'assigned' });
      }
      await refresh();
      toast.success('‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch {
      toast.error('‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }
  };

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ticket
  const handleStatusChange = async (value) => {
    try {
      await ticketService.updateTicket(id, { status: value });
      await refresh();
      toast.success('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß');
    } catch {
      toast.error('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö Ticket
  const handleDelete = async () => {
    const res = await Swal.fire({
      title: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      text: '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    });
    if (!res.isConfirmed) return;

    try {
      await ticketService.deleteTicket(ticket.ticket_id);
      toast.success('‡∏•‡∏ö Ticket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      navigate('/admin/tickets');
    } catch (err) {
      toast.error(err.message || '‡∏•‡∏ö Ticket ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠ error
  if (loading) return <div style={{ textAlign: 'center', padding: 40 }}><Spin size="large" /><div style={{ marginTop: 12 }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div></div>;
  if (error) return <Alert message={error} type="error" showIcon style={{ padding: 40 }} />;
  if (!ticket) return null;

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö select assignee
  const assigneeOptions = assignees.map(u => ({ value: u.user_id, label: u.full_name }));
  const statusChoices = isAdmin ? statusOptions : getNextStatusOptions(ticket.status);

  return (
    <div className="ticket-page-container">
      {/* ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Ticket */}
      <div className="ticket-header">
        <div className="ticket-title-group">
          <h2 className="ticket-title">
            ‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å {ticket.title}
            <span className="ticket-id">#{ticket.ticket_id}</span>
          </h2>
        </div>
        <div className="ticket-action-group">
          <StatusBadge status={ticket.status} />
          {isAdmin && <button className="btn-delete-ticket" onClick={handleDelete}>‡∏•‡∏ö Ticket</button>}
        </div>
      </div>

      {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Ticket */}
      <div className="ticket-grid">
        <div className="ticket-main">
          <h4 className="ticket-section-title">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤</h4>
          <p>{ticket.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'}</p>
          <ImageAttachments attachments={ticket.attachments} apiBase={API_BASE} />
          <VideoAttachments attachments={ticket.attachments} apiBase={API_BASE} />
          <FileAttachments attachments={ticket.attachments} apiBase={API_BASE} />
        </div>

        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á Ticket */}
        <div className="ticket-sidebar">
          <h4 className="ticket-section-title">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ticket</h4>
          <ul className="ticket-info-list">
            <li><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> <StatusBadge status={ticket.status} /></li>
            <li><strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</strong> <PriorityBadge priority={ticket.priority} /></li>
            <li><strong>‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á:</strong> {ticket.requester_fullname || 'N/A'}</li>
            <li><strong>‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:</strong> {new Date(ticket.created_at).toLocaleString('th-TH')}</li>
            <li><strong>‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</strong> {new Date(ticket.updated_at).toLocaleString('th-TH')}</li>
            <li><strong>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö:</strong> {ticket.assignees?.map(a => a.full_name).join(', ') || '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢'}</li>
          </ul>

          {/* ‡∏™‡πà‡∏ß‡∏ô‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô */}
          {isAdmin && (
            <>
              <label>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö:</label>
              <Select
                mode="multiple"
                style={{ width: '100%' }}
                placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô..."
                value={selectedAssignees.map(a => a.value)}
                onChange={handleAssigneeChange}
              >
                {assigneeOptions.map(opt => (
                  <Option key={opt.value} value={opt.value}>{opt.label}</Option>
                ))}
              </Select>
              <button className="btn-assign success" onClick={handleAssignConfirm}>‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢</button>
            </>
          )}

          {/* ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
          <div className="ticket-status-edit" style={{ marginTop: 16 }}>
            <label>‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</label>
            <Select
              style={{ width: '100%' }}
              value={{
                value: ticket.status,
                label: statusOptions.find(opt => opt.value === ticket.status)?.label || ticket.status
              }}
              onChange={(selected) => handleStatusChange(selected.value)}
              labelInValue
              disabled={!isAdmin && statusChoices.length === 0}
            >
              {statusChoices.map(opt => (
                <Option key={opt.value} value={opt.value}>
                  {opt.label}
                </Option>
              ))}
            </Select>
          </div>
        </div>
      </div>
    </div>
  );
};

export default TicketDetailPage;
