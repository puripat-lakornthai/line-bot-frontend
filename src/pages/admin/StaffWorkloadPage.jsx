import React, { useEffect, useState } from 'react';
import { Table, Typography, Pagination, Spin, Alert, Button } from 'antd';
import staffService from '../../services/staffService';
import TaskModal from '../../components/TaskModal';

const { Title } = Typography;
const limit = 10;

const StaffWorkloadPage = () => {
  const [data, setData] = useState([]); // ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô
  const [page, setPage] = useState(1); // ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á pagination
  const [loading, setLoading] = useState(true); // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [error, setError] = useState(''); // ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

  const [selectedStaff, setSelectedStaff] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î modal

  useEffect(() => {
    staffService.getStaffWorkload()
      .then((res) => {
        if (!Array.isArray(res)) throw new Error();
        setData(res);
      })
      .catch(() => setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'))
      .finally(() => setLoading(false));
  }, []);

  // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏£‡∏ß‡∏°‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡∏á‡∏≤‡∏ô"
  const columns = [
    { title: '‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', dataIndex: 'full_name' },
    { title: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå', dataIndex: 'phone', render: v => v || '-' },
    { title: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö', dataIndex: 'ticket_count' },
    {
      title: '', // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡∏î‡∏π‡∏á‡∏≤‡∏ô"
      render: (_, record) => (
        <Button type="link" onClick={() => setSelectedStaff(record)}>
          ‡∏î‡∏π‡∏á‡∏≤‡∏ô
        </Button>
      )
    }
  ];

  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const paginated = data.slice((page - 1) * limit, page * limit);

  return (
    <div style={{ padding: 24 }}>
      {/* ‡∏õ‡∏£‡∏±‡∏ö padding ‡πÅ‡∏ö‡∏ö responsive ‡∏î‡πâ‡∏ß‡∏¢ clamp() ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° responsive shadow + radius */}
      <div
        style={{
          background: '#fff',
          padding: 'clamp(16px, 5vw, 24px)',
          borderRadius: 8,
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
        }}
      >
        {/* ‡πÉ‡∏ä‡πâ clamp() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏à‡∏≠ */}
        <Title level={3} style={{ fontSize: 'clamp(1.25rem, 2.5vw, 1.75rem)' }}>
          üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        </Title>

        {/* ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• */}
        {loading ? (
          <div style={{ textAlign: 'center', padding: 40 }}>
            <Spin size="large" />
            <div style={{ marginTop: 12, color: '#555' }}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>
          </div>
        ) : error ? (
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
          <Alert message={error} type="error" showIcon style={{ padding: 40 }} />
        ) : (
          <>
            {/* ‡∏´‡πà‡∏≠ Table ‡∏î‡πâ‡∏ß‡∏¢ div ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ scroll ‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤‡πÑ‡∏î‡πâ‡∏ö‡∏ô‡∏à‡∏≠‡πÅ‡∏Ñ‡∏ö */}
            <div style={{ overflowX: 'auto' }}>
              <Table
                dataSource={paginated}
                columns={columns}
                rowKey="user_id"
                pagination={false}
                bordered={false}
              />
            </div>

            {/* ‡πÅ‡∏™‡∏î‡∏á pagination ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏ô limit */}
            {data.length > limit && (
              <div style={{ textAlign: 'center', marginTop: 16 }}>
                <Pagination
                  current={page}
                  pageSize={limit}
                  total={data.length}
                  onChange={setPage}
                  showSizeChanger={false}
                />
              </div>
            )}
          </>
        )}

        {/* ‡πÅ‡∏™‡∏î‡∏á modal ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î "‡∏î‡∏π‡∏á‡∏≤‡∏ô" */}
        <TaskModal
          visible={!!selectedStaff}
          staff={selectedStaff}
          onClose={() => setSelectedStaff(null)}
        />
      </div>
    </div>
  );
};

export default StaffWorkloadPage;
