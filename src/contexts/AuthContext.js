import React, { createContext, useState, useEffect, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö redirect ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
import { jwtDecode } from 'jwt-decode';
import { getToken, setToken as storeToken, removeToken, isTokenExpired } from '../utils/authUtils';
import authService from '../services/authService';
import { toast } from 'react-toastify';

// ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö authentication
const AuthContext = createContext(null);

// Provider ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πà‡∏≠ component ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö
export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null); // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
  const [loading, setLoading] = useState(true);         // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const navigate = useNavigate();
  const location = useLocation();

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  const handleTokenExpired = useCallback(() => {
    removeToken();
    setCurrentUser(null);

    // ‡πÅ‡∏™‡∏î‡∏á toast ‡πÅ‡∏Ñ‡πà‡∏ñ‡πâ‡∏≤ user ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ protected
    if (location.pathname !== '/' && location.pathname !== '/login') {
      toast.warn("‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
      navigate('/');
    }
  }, [navigate, location.pathname]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  const logout = () => {
    console.log("Logging out user.");
    removeToken();
    setCurrentUser(null);
    toast.success("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"); // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ popup
    navigate('/');
  };

  // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å mount
  useEffect(() => {
    const token = getToken();

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£ (‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ login ‡∏Å‡πá‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÑ‡∏ß‡πâ)
    if (!token) {
      setLoading(false);
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏´‡∏°
    if (isTokenExpired(token)) {
      handleTokenExpired(); // ‚úÖ ‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    } else {
      try {
        const decoded = jwtDecode(token);
        setCurrentUser(decoded); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å token
      } catch (err) {
        console.error("Token decode failed:", err);
        handleTokenExpired(); // ‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤ token ‡∏û‡∏±‡∏á
      }
    }

    setLoading(false); // ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à

    // ‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á event "auth-error-unauthorized"
    const handleUnauthorizedError = () => {
      handleTokenExpired();
    };
    window.addEventListener('auth-error-unauthorized', handleUnauthorizedError);
    return () => {
      window.removeEventListener('auth-error-unauthorized', handleUnauthorizedError);
    };
  }, [handleTokenExpired]);

  // ‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà user ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
  useEffect(() => {
    const interval = setInterval(() => {
      const token = getToken();
      if (token && isTokenExpired(token)) {
        console.warn("üîê Token expired ‚Äî logging out");
        handleTokenExpired();
      }
    }, 60 * 1000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(interval);
  }, [handleTokenExpired]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
  const login = async (credentials) => {
    try {
      // 1. ‡∏™‡πà‡∏á credentials ‡πÑ‡∏õ login ‡∏ó‡∏µ‡πà backend
      const response = await authService.login(credentials);

      // 2. ‡∏ñ‡πâ‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏°‡∏µ token ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á localStorage
      if (response.success && response.data?.token) {
        const token = response.data.token;
        storeToken(token);

        try {
          // 3. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å backend
          const meResponse = await authService.getMe();

          // 4. ‡∏ñ‡πâ‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á currentUser ‡∏à‡∏≤‡∏Å backend
          if (meResponse?.success && meResponse.data) {
            setCurrentUser(meResponse.data);
            setLoading(false);
            toast.success('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ú‡πà‡∏≤‡∏ô getMe)');
            return meResponse.data;
          }

          // 5. ‡∏ñ‡πâ‡∏≤ response ‡∏à‡∏≤‡∏Å backend ‡∏ú‡∏¥‡∏î format ‡∏´‡∏£‡∏∑‡∏≠ error ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤ catch ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
          throw new Error('getMe ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (getMeError) {
          // 6. fallback decode token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ getMe ‡∏û‡∏±‡∏á
          try {
            const decoded = jwtDecode(token);
            setCurrentUser(decoded);
            setLoading(false);
            toast.success('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ú‡πà‡∏≤‡∏ô decode token)');
            return decoded;
          } catch (decodeErr) {
            throw new Error('Token ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ decode ‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞ getMe ‡∏Å‡πá‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
          }
        }
      }

      // 7. ‡∏ñ‡πâ‡∏≤ login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô error ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
      throw new Error(response.message || 'Login failed');
    } catch (err) {
      // 8. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏î ‡πÜ ‡πÉ‡∏´‡πâ‡∏•‡∏ö token ‡πÅ‡∏•‡∏∞‡∏´‡∏¢‡∏∏‡∏î loading
      setLoading(false);
      removeToken();
      throw err;
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏)
  const register = async (userData) => { /* ... */ };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
  const refreshCurrentUser = useCallback(async () => { /* ... */ }, []);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á context value ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö component ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
  const value = {
    currentUser,
    login,
    logout,
    register,
    loading,
    isAuthenticated: !!currentUser && !isTokenExpired(getToken()), // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ login ‡πÅ‡∏•‡∏∞ token ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    refreshCurrentUser
  };

  // ‡∏™‡πà‡∏á context ‡πÉ‡∏´‡πâ children
  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthContext;
